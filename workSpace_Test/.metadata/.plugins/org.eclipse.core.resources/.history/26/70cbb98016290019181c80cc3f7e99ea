package snail;

public class main {

	public static void main(String[] args) {
		   
	      // 오른쪽 벽에 다다르면 snail[x][y]의 x값이 +되는듯하며
	      // 밑에 박으면 왼쪽 방향 즉, y값이 -가 된다. 
	      // 왼쪽 벽에 박으면 x값이 -가 되며 
	      // 위에 박으면 y값은 +가 된다.
	      // 이때 진행방향에 숫자값이 들어가 있어 좌표가 0이 아니라면
	      // 진행방향에 따라 x 또는 y 값에 변화를 주도록 한다.
	      //  총 배열의 사이즈는 snail[5][5] 이며 
	       // snail[5][5] 가 숫자 만난 때 줄이기 위해 input 변수 생성
	        int i, j; // for문의 증감인자를 변수로 선언해놓기
	        int cnt = 1; // 카운트변수 
	        //진행 방향에 따른 변수 각 각 벽에 부딪히고 변할 숫자를 셋팅
	        int right = 0;
	      int bottom = -1;
	      int top = 1; 
	        
	        int[][] snail = new int[5][5];
	        int input = 5;
	        
	        for(i=input; i>=0; i--) { //4 // i값은 5,4,3,2,1,0순서로 줄어들게 되며 밑에 있는 j값과 상호작용을 하도록해보자
	           //첫 진행 상황이며 , 
	            for(j=0; j<input; j++) {
	               // bottom 값은 snail의 좌우측 진행 방향이며 
	                bottom = bottom + top;
	                
	                snail[right][bottom] = cnt;
	                
	                cnt++; //카운트 변수를 지속적으로 추가한다. 1,2,3,4,5 진행.
	            }
	            // i 값은 5, j값은 0 인경우 bottom 값은 0. / snail[right][bottom] 은 snail[0][0]이 된다. 그리고 여기서 카운트숫자 1 를 넣고 후위증감을 시도
	            // j 의 값이 1일 때 bottom 값은 0; snail[0][0] 값은 2; 
	            
	            
	            //위의 작업 후 input 즉 사이즈로 들어간 행과 열의 숫자인 5를 후위증감을 걸어 밑에 for문이 끝난후 감소 시켜
	            input--; //3
	            
	            //i값은 여전히 0이며 j값은 input은 현재 5이므로 j는 5보다 작은 수 0,1,2,3,4 의 범위를 가지고 시작.
	            // right 값
	            for(j=0; j<input; j++) {
	                right = right + top;
	                snail[right][bottom] = cnt;
	                cnt++;
	            }
	            top = top*(-1); // -1 
	        }
	        
	        int m; // 행
	        int n; // 열
	        
	        //출력해주는 구문 
	        for(m=0; m<5; m++) {
	            for(n=0; n<5; n++) {
	                System.out.print(snail[m][n] + "\t");
	                
	            }
	            System.out.println("");
	        }
	        System.out.println("");
	        
	        // 90도를 돌리고 돌리면 
	        /*
	         * 13 14 15 16 1
	         * 12 23 24 17 2
	         * 11 22 25 18 3
	         * 10 21 20 19 4
	         * 9  8  7  6  5 
	         * 
	         */
	        
	        // snail90[0][4] 부터 시작하게 된다.
	       // snail[0][4] = 1. 카운트 변수를 두도록 한다.
	        // 
	        
	        int s; // 메인 for문의 증감인자
	        int r; // sub for문의증감인자.
	        
	        int counter = 1; // snail배열에 들어갈 값 이며 추가 될 때마다 ++값을 주게 된다.
	        
	        //snail[0][4]가 될 시 다음 값은 snail[1][4]로 , snail[2][4]로 , snail[3][4], snail[4][4]가 되며 x값과 y값이 같아졌을 경우 (x = y = 4)
	        // 진행방향을 바꾸고 snail[4][3] snail[4][2] snail[4][1] snail[4][0] 이 된다. 즉 y값의 감소가 이루저지며 y값은 0 미만으로 가지 않는다.
	        
	        // 다음은 x값의 감소로 이루어지며 snail[0][0] 이 될경우 y값의 + 효과를 주게 된다.
	        
	        //!!!! 2차 진행. ( 진행방향에 숫자가 있는 경우 ) 
	        //******* 1. 다음 진행 상황시 좌표상에 숫자가 있을 경우 멈추고 y값 고정 x값은 증가하게 된다. / 
	        //          2. 
	        
	        // 종합 . 
	        //처음 진행 . snail[0][4]에서 시작. 
	        //1.  우측으로 갈 경우 : y값은 지속적 증가 y값이 4가 될경우 y값 고정 x값 증가. == snail[x][y+1]
	        //2.  밑으로 가야하는 경우 : x값 지속적 증가. y값은 고정. ==   snail[x+1][y] 
	        //3.  좌측으로 가야하는 경우 :    x값의 고정. y값의 감소. == snail[x][y-1]
	        //4.  위로 가야 하는 경우 : x값의 감소. y값의 고정 == snail[x-1][y]
	           
	        // 총 4개의 로직.
	        
	        //서브 로직
	        
	        // 1,2,3,4 모든 경우. 진행 좌표가 0이 아닐경우 진행 방향에 따라 1,2,3,4 의 경우가 적용이 된다.
	        
	        
	        
	        
	        
	       
	   }
}
