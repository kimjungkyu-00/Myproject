<?xml version="1.0" encoding="UTF-8"?>

<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributorlicense agreements. See the NOTICE file distributed with this work for additionalinformation regarding copyright ownership. The ASF licenses this file toYou under the Apache License, Version 2.0 (the "License"); you may not usethis file except in compliance with the License. You may obtain a copy ofthe License at http://www.apache.org/licenses/LICENSE-2.0 Unless requiredby applicable law or agreed to in writing, software distributed under theLicense is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONSOF ANY KIND, either express or implied. See the License for the specificlanguage governing permissions and limitations under the License. -->

<!-- Note: A "Server" is not itself a "Container", so you may not definesubcomponents such as "Valves" at this level. Documentation at /docs/config/server.html -->

-<Server shutdown="SHUTDOWN" port="8005">

<Listener className="org.apache.catalina.startup.VersionLoggerListener"/>

<!-- Security listener. Documentation at /docs/config/listeners.html <ListenerclassName="org.apache.catalina.security.SecurityListener" /> -->


<!--APR library loader. Documentation at /docs/apr.html -->


<Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on"/>

<!-- Prevent memory leaks due to use of particular java/javax APIs -->


<Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener"/>

<Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"/>

<Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener"/>

<!-- Global JNDI resources Documentation at /docs/jndi-resources-howto.html -->



-<GlobalNamingResources>

<!-- Editable user database that can also be used by UserDatabaseRealmto authenticate users -->


<Resource type="org.apache.catalina.UserDatabase" pathname="conf/tomcat-users.xml" name="UserDatabase" factory="org.apache.catalina.users.MemoryUserDatabaseFactory" description="User database that can be updated and saved" auth="Container"/>

</GlobalNamingResources>

<!-- A "Service" is a collection of one or more "Connectors" that sharea single "Container" Note: A "Service" is not itself a "Container", so youmay not define subcomponents such as "Valves" at this level. Documentationat /docs/config/service.html -->



-<Service name="Catalina">

<!--The connectors can use a shared executor, you can define one or morenamed thread pools -->


<!-- <Executor name="tomcatThreadPool" namePrefix="catalina-exec-" maxThreads="150"minSpareThreads="4"/> -->


<!-- A "Connector" represents an endpoint by which requests are receivedand responses are returned. Documentation at : Java HTTP Connector: /docs/config/http.htmlJava AJP Connector: /docs/config/ajp.html APR (HTTP/AJP) Connector: /docs/apr.htmlDefine a non-SSL/TLS HTTP/1.1 Connector on port 8080 -->


<Connector port="8080" redirectPort="8443" protocol="HTTP/1.1" connectionTimeout="20000"/>

<!-- A "Connector" using the shared thread pool -->


<!-- <Connector executor="tomcatThreadPool" port="8080" protocol="HTTP/1.1"connectionTimeout="20000" redirectPort="8443" /> -->


<!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443 This connector usesthe NIO implementation. The default SSLImplementation will depend on thepresence of the APR/native library and the useOpenSSL attribute of the AprLifecycleListener.Either JSSE or OpenSSL style configuration may be used regardless of theSSLImplementation selected. JSSE style configuration is used below. -->


<!-- <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"maxThreads="150" SSLEnabled="true"> <SSLHostConfig> <Certificate certificateKeystoreFile="conf/localhost-rsa.jks"type="RSA" /> </SSLHostConfig> </Connector> -->


<!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2 Thisconnector uses the APR/native implementation which always uses OpenSSL forTLS. Either JSSE or OpenSSL style configuration may be used. OpenSSL styleconfiguration is used below. -->


<!-- <Connector port="8443" protocol="org.apache.coyote.http11.Http11AprProtocol"maxThreads="150" SSLEnabled="true" > <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol"/> <SSLHostConfig> <Certificate certificateKeyFile="conf/localhost-rsa-key.pem"certificateFile="conf/localhost-rsa-cert.pem" certificateChainFile="conf/localhost-rsa-chain.pem"type="RSA" /> </SSLHostConfig> </Connector> -->


<!-- Define an AJP 1.3 Connector on port 8009 -->


<Connector port="8009" redirectPort="8443" protocol="AJP/1.3"/>

<!-- An Engine represents the entry point (within Catalina) that processesevery request. The Engine implementation for Tomcat stand alone analyzesthe HTTP headers included with the request, and passes them on to the appropriateHost (virtual host). Documentation at /docs/config/engine.html -->


<!-- You should set jvmRoute to support load-balancing via AJP ie : <Enginename="Catalina" defaultHost="localhost" jvmRoute="jvm1"> -->



-<Engine name="Catalina" defaultHost="localhost">

<!--For clustering, please take a look at documentation at: /docs/cluster-howto.html(simple how to) /docs/config/cluster.html (reference documentation) -->


<!-- <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/> -->


<!-- Use the LockOutRealm to prevent attempts to guess user passwordsvia a brute-force attack -->



-<Realm className="org.apache.catalina.realm.LockOutRealm">

<!-- This Realm uses the UserDatabase configured in the global JNDI resourcesunder the key "UserDatabase". Any edits that are performed against this UserDatabaseare immediately available for use by the Realm. -->


<Realm className="org.apache.catalina.realm.UserDatabaseRealm" resourceName="UserDatabase"/>

</Realm>


-<Host name="localhost" unpackWARs="true" autoDeploy="true" appBase="webapps">

<!-- SingleSignOn valve, share authentication between web applicationsDocumentation at: /docs/config/valve.html -->


<!-- <Valve className="org.apache.catalina.authenticator.SingleSignOn"/> -->


<!-- Access log processes all example. Documentation at: /docs/config/valve.htmlNote: The pattern used is equivalent to using pattern="common" -->


<Valve className="org.apache.catalina.valves.AccessLogValve" suffix=".txt" prefix="localhost_access_log" pattern="%h %l %u %t "%r" %s %b" directory="logs"/>

<Context source="org.eclipse.jst.jee.server:project" reloadable="true" path="/" docBase="project"/>

</Host>

</Engine>

</Service>

</Server>